}
f0 <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
f1 <- function(x) {   ## Rosenbrock Banana function with higher dimension
res = 0.0
for(i in 1:(length(x)-1))
res = res + 100*(x[i+1] - x[i]^2)^2 + (1-x[i])^2
return(res)
}
g0 <- function(x) { ## Gradient of 'f0'
x1 <- x[1]
x2 <- x[2]
c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
200 *      (x2 - x1 * x1))
}
g1 <- function(x) { ## Gradient of 'f1'
n <- length(x)
g <- numeric(n)
for(i in 1:(n-1)) {
g[i] <- g[i] -400 * x[i] * (x[i+1] - x[i]^2) - 2 * (1 - x[i])
g[i+1] <- g[i+1] + 200 * (x[i+1] - x[i]^2)
}
return (g)
}
fr <- f1
#gr <- g1
x_size <- 4
x_intial <- rnorm(x_size,sd = 10)
x_intial <- rep(-4,x_size)
x_intial <- c(4,-4,4,-4)
r.default <- optim(x_intial, fr, gr = gr.wrapper(fr, enable = FALSE), method = "BFGS")
r.new <- optim(x_intial, fr, gr.wrapper(fr, enable = TRUE), method = "BFGS")
print(c(r.default$value, r.new$value))
print(r.default$counts)
print(r.new$counts)
r.default$par
r.new$par
gr.wrapper <- function(fn = NULL, enable = TRUE, ...) {
grw <- list()
grw$x.prev <- c()
grw$n <- 0
grw$A <- matrix()
grw$AA <- matrix()
grw$enable <- enable
grw$step.len <- 0.001
grw.par <<- grw
norm_vec <- function(x) sqrt(sum(x^2))
default.gr <- function(x)
{
s = 1e-3
res = numeric(length(x))
for(i in 1:length(x))
{
e = numeric(length(x))
e[i] = 1
res[i] = (fn(x+s*e) - fn(x-s*e))/(2*s)
}
return(res)
}
g1 <- function(x) { ## Gradient of 'f1'
n <- length(x)
g <- numeric(n)
for(i in 1:(n-1)) {
g[i] <- g[i] -400 * x[i] * (x[i+1] - x[i]^2) - 2 * (1 - x[i])
g[i+1] <- g[i+1] + 200 * (x[i+1] - x[i]^2)
}
return (g)
}
MGS <- function(G) {
n <- dim(G)[1]
q <- numeric(n)
for (i in 1:n) {
r <- sqrt(sum(G[,i]*G[,i]))
q = G[,i]/r
G[,i] = q
if((i + 1)<=n) for (j in (i + 1):n) {
r <- sum(q * G[,j])
G[,j] <- G[,j] - r*q
}
}
return(G)
}
gradient <- function(par, ...)
{
first.time <- FALSE
grw <- grw.par
if (grw$n == 0)
{
first.time <- TRUE
grw$x.prev <- par
grw$n <- length(par)
if (grw$enable)
{
## don't know if its a good idea to randomize this
grw$A <- matrix(rnorm(grw$n^2, sd = 1E3), grw$n, grw$n)
## ...or not
grw$A <- matrix(1e-3, grw$n, grw$n)
diag(grw$A) <- 0
diag(grw$A) <- 1 + rowSums(abs(grw$A))
} else {
grw$A <- diag(grw$n)
}
grw$AA <- grw$A
stopifnot(grw$n > 1)
}
if (!first.time && grw$enable) {
grw$A[, 2:grw$n] <- grw$A[, 1:(grw$n-1)]
grw$A[, 1] <- par - grw$x.prev
grw$x.prev <- par
grw$AA <- MGS(grw$A)
}
gg <- numeric(grw$n)
for(i in 1:grw$n) {
print(grw$step.len * grw$AA[, i])
gg[i] <- (fn(par + grw$step.len * grw$AA[, i]) -
fn(par - grw$step.len * grw$AA[, i])) / (2 * grw$step.len)
}
grad <- solve(t(grw$AA), gg)
grw.par <<- grw
# print(paste("x value: "))
# print(par)
# print(paste("new approach - grad value: "))
# print(grad)
# print(paste("exact grad value: "))
# print(g1(par))
# print(paste("numerical grad value: "))
# print(default.gr(par))
# ch1 = norm_vec(grad - g1(par))
# ch2 = norm_vec(default.gr(par) - g1(par))
# ch = norm_vec(g1(par))
# print("")
# print(paste("new approach grad value: "))
# print(ch1/ch)
# print(paste("numerical grad value: "))
# print(ch2/ch)
return(grad)
}
return(gradient)
}
f0 <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
f1 <- function(x) {   ## Rosenbrock Banana function with higher dimension
res = 0.0
for(i in 1:(length(x)-1))
res = res + 100*(x[i+1] - x[i]^2)^2 + (1-x[i])^2
return(res)
}
g0 <- function(x) { ## Gradient of 'f0'
x1 <- x[1]
x2 <- x[2]
c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
200 *      (x2 - x1 * x1))
}
g1 <- function(x) { ## Gradient of 'f1'
n <- length(x)
g <- numeric(n)
for(i in 1:(n-1)) {
g[i] <- g[i] -400 * x[i] * (x[i+1] - x[i]^2) - 2 * (1 - x[i])
g[i+1] <- g[i+1] + 200 * (x[i+1] - x[i]^2)
}
return (g)
}
fr <- f1
#gr <- g1
x_size <- 4
x_intial <- rnorm(x_size,sd = 10)
x_intial <- rep(-4,x_size)
x_intial <- c(4,-4,4,-4)
r.default <- optim(x_intial, fr, gr = gr.wrapper(fr, enable = FALSE), method = "BFGS")
r.new <- optim(x_intial, fr, gr.wrapper(fr, enable = TRUE), method = "BFGS")
print(c(r.default$value, r.new$value))
print(r.default$counts)
print(r.new$counts)
r.default$par
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
for(i in 1:(n/2))
{
c1 <- (-13 + x[2*i -1] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[2*i-1] + ( (x[2*i] + 1)*x[2*i] -14)*x[2*i])
res <- c1 + c2
}
return(res)
}
x_size <- 6
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
for(i in 1:(n/2))
{
c1 <- (-13 + x[2*i -1] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[2*i-1] + ( (x[2*i] + 1)*x[2*i] -14)*x[2*i])
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 6
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
for(i in 1:(n/2))
{
c1 <- (-13 + x[2*i -1] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[2*i-1] + ( (x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 6
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
n
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
n <- length(x)
for(i in 1:(n/2))
{
c1 <- (-13 + x[2*i -1] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[2*i-1] + ( (x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 6
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
n <- length(x)
for(i in 1:(n/2))
{
c1 <- (-13 + x[(2*i -1)] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[(2*i-1)] + ((x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 6
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
n <- length(x)
for(i in 1:(n/2))
{
c1 <- (-13 + x[(2*i -1)] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[(2*i-1)] + ((x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 6
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
n <- length(x)
for(i in 1:(n/2))
{
c1 <- (-13 + x[(2*i -1)] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[(2*i-1)] + ((x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 6
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
n <- length(x)
for(i in 1:(n/2))
{
c1 <- (-13 + x[(2*i -1)] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
res <- res + c1
}
c2 <- (-29 + x[(2*i-1)] + ((x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + c2
return(res)
}
x_size <- 6
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
n <- length(x)
for(i in 1:(n/2))
{
c1 <- (-13 + x[(2*i -1)] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[(2*i-1)] + ((x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 6
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
n <- length(x)
for(i in 1:(n/2))
{
c1 <- (-13 + x[(2*i -1)] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[(2*i-1)] + ((x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 100
x_intitial <- rep(4,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
n <- length(x)
for(i in 1:(n/2))
{
c1 <- (-13 + x[(2*i -1)] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[(2*i-1)] + ((x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 100
x_intitial <- rep(-2,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
x_intitial
Extended_Freudenstein_Roth <- function(x)
{
res =0.0
n <- length(x)
for(i in 1:(n/2))
{
c1 <- (-13 + x[(2*i -1)] + ((5 - x[2*i])*x[2*i] - 2)*x[2*i])^2
c2 <- (-29 + x[(2*i-1)] + ((x[2*i] + 1)*x[2*i] -14)*x[2*i])^2
res <- res + (c1 + c2)
}
return(res)
}
x_size <- 100
x_intitial <- rep(-2,x_size)
r.new <- optim(x_intitial, fn = Extended_Freudenstein_Roth, method = "BFGS")
r.new$par
print(round(dig = 6, 0.0002599671))
print(round(dig = 6, 0.0001042071))
print(round(dig = 6, 0.0002713747))
print(round(dig = 6, 7.789997e-05))
see inla.doc("generic0")
inla.doc("generic0")
inla.doc("generic0")
inla.doc("generic")
inla.doc("generic0")
inla.doc("generic0")
rm(list = ls(all.names = TRUE))
airp.ar1 <- inla(log(AirPassengers) ~ 0 + year + f(ID, model = "ar1"),
control.family = list(hyper = list(prec = list(param = c(1, 0.2)))),
data = airp.data, control.predictor = list(compute = TRUE))
summary(airp.ar1)
data(AirPassengers)
airp.data <- data.frame(airp = as.vector(AirPassengers),
month = as.factor(rep(1:12, 12)),
year = as.factor(rep(1949:1960, each = 12)),
ID = 1:length(AirPassengers))
airp.rw1 <- inla(log(AirPassengers) ~ 0 + year + f(ID, model = "rw1"),
control.family = list(hyper = list(prec = list(param = c(1, 0.2)))),
data = airp.data, control.predictor = list(compute = TRUE))
summary(airp.rw1)
plot(airp.data$airp, type ="l")
plot(log(airp.data$airp), type = "l", xlab = "Year", ylab = "Log of the count of passengers")
airp.data$l_airp = log(airp.data$airp)
airp.ar1 <- inla(log(AirPassengers) ~ 0 + year + f(ID, model = "ar1"),
control.family = list(hyper = list(prec = list(param = c(1, 0.2)))),
data = airp.data, control.predictor = list(compute = TRUE))
summary(airp.ar1)
airp.ar1$mode$theta
inla.priors.used(airp.ar1)
0.15*0.5
summary(airp.ar1)
airp.ar1 <- inla(log(AirPassengers) ~ 0 + year + f(ID, model = "ar1"),
control.family = list(hyper = list(prec = list(param = c(1, 0.2)))),
data = airp.data, control.predictor = list(compute = TRUE), verbose = TRUE)
summary(airp.ar1)
AirPassengers
plot(AP,xlab="Date", ylab = "Passenger numbers (1000's)",main="Air Passenger numbers from 1949 to 1961")
AP <- AirPassengers
plot(AirPassengers,xlab="Date", ylab = "Passenger numbers (1000's)",main="Air Passenger numbers from 1949 to 1961")
plot(airp.data$airp, type ="l")
plot(log(airp.data$airp), type = "l", xlab = "Year", ylab = "Log of the count of passengers")
airp.data$l_airp = log(airp.data$airp)
plot(AirPassengers,xlab="Date", ylab = "Passenger numbers (1000's)",main="Air Passenger numbers from 1949 to 1961")
plot(log(AirPassengers),xlab="Date", ylab = "Passenger numbers (1000's)",main="Air Passenger numbers from 1949 to 1961")
plot(log(AirPassengers),xlab="Year", ylab = "Log of the count of passengers",main="Air Passenger numbers from 1949 to 1961")
plot(log(AirPassengers),xlab="Year", ylab = "Log of the count of passengers")
set.seed(165715)
smartGrad::testing(fn="Rosenbrock_Banana",verbose = list(MSE = TRUE), xdim = 2)
smartGrad::testing(fn="Rosenbrock_Banana",verbose = list(iters = TRUE))
smartGrad::testing(fn="Rosenbrock_Banana",verbose = list(wheel= list(show = TRUE, wheelparts = 0.5,position = 6)))
library(smartGrad)
detach("package:smartGrad", unload = TRUE)
library(smartGrad)
smartGrad::testing(fn="Rosenbrock_Banana",verbose = list(wheel= list(show = TRUE, wheelparts = 0.5,position = 6)))
setwd("~/Documents/smartGrad/papercodes/Generating Plots")
setwd("~/Documents/smartGrad/papercodes/Generating Plots")
source("verbose.R")
source("wrapper.R")
source("funcs.R")
setwd("~/Documents/smartGrad/papercodes/Generating Plots")
source("verbose.R")
source("wrapper.R")
source("funcs.R")
fn = "Rosenbrock_Banana"
verbose = list(wheel= list(show = TRUE, wheelparts = 0.5,position = 6))
xdim = 2
res.fns <- .myfuncs(fn)
myfn <- res.fns$myfn
myegr <- res.fns$myegr
## I add an argument here, just to make sure it passes through correctly...
f1 <- myfn
## use simple estimates
g1.new <- .gr.wrapper(f1, .enable = TRUE, .verbose = verbose$iters, gr.args = list(step.size = 0.00099))
g1.plain <- .gr.wrapper(f1, .enable = FALSE)
g1 <- function(x, ...) {
n <- length(x)
g <- myegr(x)
err.new <- mean(abs(g - g1.new(x)))
err.default <- mean(abs(g - g1.plain(x)))
##print(round(dig = 6, c(err.new = err.new, err.default = err.default, ratio = err.new/err.default)))
G <- Global  #get("Global", envir = .GlobalEnv)
G$err.trace <- c(G$err.trace, err.new - err.default)
G$default.trace <- c(G$default.trace, err.default)
G$new.trace <- c(G$new.trace, err.new)
G$x_trace_x1 = c(G$x_trace_x1,x[1])
G$x_trace_x2 = c(G$x_trace_x2,x[2])
G$y_trace = c(G$y_trace,myfn(x))
#assign("Global", G, envir = .GlobalEnv)
Global <<- G
return (g)
}
Global <<- list(err.trace = c(), default.trace = c(), new.trace = c(),x_trace_x1 = c(),x_trace_x2 = c(), y_trace = c())
x_initial = rnorm(xdim, mean = 1, sd = 2)
r.opt <- stats::optim(x_initial, f1, g1, method = "BFGS", control = list(maxit = 100000))
x_initial
verbose$iters
fn = "Rosenbrock_Banana"
verbose = list(wheel= list(show = TRUE, wheelparts = 0.5,position = 6))
xdim = 2
verbose$MSE = FALSE
verbose$iters = FALSE
verbose$wheel$show = FALSE
res.fns <- .myfuncs(fn)
myfn <- res.fns$myfn
myegr <- res.fns$myegr
## I add an argument here, just to make sure it passes through correctly...
f1 <- myfn
## use simple estimates
g1.new <- .gr.wrapper(f1, .enable = TRUE, .verbose = verbose$iters, gr.args = list(step.size = 0.00099))
g1.plain <- .gr.wrapper(f1, .enable = FALSE)
g1 <- function(x, ...) {
n <- length(x)
g <- myegr(x)
err.new <- mean(abs(g - g1.new(x)))
err.default <- mean(abs(g - g1.plain(x)))
##print(round(dig = 6, c(err.new = err.new, err.default = err.default, ratio = err.new/err.default)))
G <- Global  #get("Global", envir = .GlobalEnv)
G$err.trace <- c(G$err.trace, err.new - err.default)
G$default.trace <- c(G$default.trace, err.default)
G$new.trace <- c(G$new.trace, err.new)
G$x_trace_x1 = c(G$x_trace_x1,x[1])
G$x_trace_x2 = c(G$x_trace_x2,x[2])
G$y_trace = c(G$y_trace,myfn(x))
#assign("Global", G, envir = .GlobalEnv)
Global <<- G
return (g)
}
Global <<- list(err.trace = c(), default.trace = c(), new.trace = c(),x_trace_x1 = c(),x_trace_x2 = c(), y_trace = c())
x_initial = rnorm(xdim, mean = 1, sd = 2)
r.opt <- stats::optim(x_initial, f1, g1, method = "BFGS", control = list(maxit = 100000))
cat("-> x* is : ", r.opt$par, "\n")
cat("-> value of fn(x*) is: ", r.opt$value)
print(.plot_MSE(c(1:length(Global$default.trace)),Global$default.trace,Global$new.trace, addTitle,FALSE))
addTitle = fn
print(.plot_MSE(c(1:length(Global$default.trace)),Global$default.trace,Global$new.trace, addTitle,FALSE))
